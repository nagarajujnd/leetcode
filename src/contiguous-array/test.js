import { findMaxLength } from '.'

test('', () => {
  expect(findMaxLength([0, 1])).toBe(2)
})

test('', () => {
  expect(findMaxLength([0, 0, 1, 0, 0, 0, 1, 1])).toBe(6)
})

test('', () => {
  expect(findMaxLength([0])).toBe(0)
})

test('', () => {
  expect(
    findMaxLength([
      0,
      0,
      1,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      1,
      1,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      1,
      0,
      0,
      1,
    ]),
  ).toBe(54)
})

test('', () => {
  expect(
    findMaxLength([
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      1,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      0,
      1,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      0,
      1,
      1,
      0,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      0,
      0,
      1,
      1,
      1,
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      0,
      0,
      1,
      0,
      1,
      1,
    ]),
  ).toBe(94)
})

test('', () => {
  expect(findMaxLength([0, 1, 1, 0, 1, 1, 1, 0])).toBe(4)
})

test('', () => {
  expect(findMaxLength([1, 0, 1])).toBe(2)
})

test('', () => {
  expect(findMaxLength([0, 1, 0, 1])).toBe(4)
})

test('', () => {
  expect(findMaxLength([1, 0, 0, 1, 0])).toBe(4)
})

test('', () => {
  expect(findMaxLength([0, 1, 1, 1, 0])).toBe(2)
})
